import os
import time
from typing import Dict
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from rag_processor import DBConstructor

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(".venv/.env")
TOKEN = os.getenv('TG_TOKEN')
FAISS_BASE_DIR = "DB_FAISS"


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_DB, PROCESSING_QUERY = range(2)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions: Dict[int, dict] = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑
    databases = [d for d in os.listdir(FAISS_BASE_DIR)
                 if os.path.isdir(os.path.join(FAISS_BASE_DIR, d))]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [[db] for db in databases]
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await update.message.reply_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

    user_sessions[user_id] = {"status": SELECTING_DB}
    return SELECTING_DB


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –í—ã–±–æ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
/cancel - –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏

üîé –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ–∏—Å–∫ –æ—Ç—Ä—ã–≤–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –≤–æ–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.
    –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
    –í –æ—Ç–≤–µ—Ç –±–æ—Ç –≤—ã–¥–∞—Å—Ç –æ—Ç—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü. –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 4000 —Å–∏–º–≤–æ–ª–æ–≤: —ç—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram.
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ. –ë–æ—Ç –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    """
    await update.message.reply_text(help_text)


async def handle_database_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    selected_db = update.message.text

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–∞–∑—ã
        processor = DBConstructor()
        db_path = os.path.join(FAISS_BASE_DIR, selected_db)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
        user_sessions[user_id] = {
            "processor": processor,
            "db_path": db_path,
            "status": PROCESSING_QUERY
        }

        await update.message.reply_text(
            f"‚úÖ –ë–∞–∑–∞ '{selected_db}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!\n"
            "–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        return PROCESSING_QUERY

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return ConversationHandler.END


async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    user_id = update.effective_user.id

    if user_id not in user_sessions:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É —á–µ—Ä–µ–∑ /start")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
    processor = user_sessions[user_id]["processor"]
    db_path = user_sessions[user_id]["db_path"]
    query = update.message.text

    try:
        msg = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = processor.sim_search(query, db_path, k=5)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = []
        current_doc = None
        for doc in results:
            if doc.metadata.get("document_title") != current_doc:
                current_doc = doc.metadata.get("document_title")
                response.append(f"\nüìÑ **{current_doc}**\n")
            response.append(f"‚Ä¢ {doc.page_content[:250]}...\n")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await msg.edit_text('\n'.join(response)[:4000])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    user_id = update.effective_user.id
    user_sessions.pop(user_id, None)
    await update.message.reply_text(
        "–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def main():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_DB: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_database_selection),
                CommandHandler('help', help_command),
                CommandHandler('cancel', cancel)
            ],
            PROCESSING_QUERY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_query),
                CommandHandler('help', help_command),
                CommandHandler('cancel', cancel)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler('help', help_command))

    app.run_polling()


if __name__ == "__main__":
    main()