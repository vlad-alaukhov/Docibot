import os
import asyncio
import traceback
from pprint import pprint

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from rag_processor import DBConstructor
from dotenv import load_dotenv

class Config:
    os.environ.clear()
    load_dotenv(".venv/.env")
    FAISS_ROOT = os.path.join(os.getcwd(), "DB_FAISS")
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    DEFAULT_K = 4

# config = Config()
bot = Bot(token=Config.BOT_TOKEN)
dp = Dispatcher()
processor = DBConstructor()
user_sessions = {}

# --------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---------------------
async def on_startup(bot: Bot):
    print("üîÑ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")

    try:
        set_embs_result = processor.set_embeddings(Config.FAISS_ROOT, verbose=True)
        processor.db_metadata = set_embs_result["result"]["metadata"]
        print(processor.db_metadata["is_e5_model"])

        if not set_embs_result["success"]:
            error_msg = set_embs_result.get("result", {}).get("Error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {error_msg}")
            return

        print("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
        raise

# --------------------- –ö–æ–º–∞–Ω–¥–∞ /start ---------------------
@dp.message(Command("start"))
async def start(message: types.Message):
    try:
        categories = [
            d for d in os.listdir(Config.FAISS_ROOT)
            if os.path.isdir(os.path.join(Config.FAISS_ROOT, d))
        ]

        if not categories:
            await message.answer("‚ö†Ô∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text=category,
                    callback_data=f"category_{category}"
                )]
                for category in categories
            ]
        )

        await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:", reply_markup=keyboard)

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        print(f"‚ùó –û—à–∏–±–∫–∞ –≤ /start: {e}")

# --------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---------------------
@dp.callback_query(F.data.startswith("category_"))
async def handle_category(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        category = callback.data.split("_", 1)[1]  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        user_sessions[user_id] = {
            "faiss_indexes": [],  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
            "query_prefix": "",
            "last_results": []  # –í–∞–∂–Ω–æ: —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á –∑–∞—Ä–∞–Ω–µ–µ
        }

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        category_path = os.path.join(Config.FAISS_ROOT, category)
        if not os.path.exists(category_path):
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ó–∞–≥—Ä—É–∑–∫–∞..."
        await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...")

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑
        faiss_indexes = []
        faiss_paths = [d for d, _, files in os.walk(category_path) for file in files if file.endswith(".faiss")]

        print(faiss_paths)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_msg = await callback.message.answer("üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%")

        for idx, faiss_dir in enumerate(faiss_paths):
            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            load_result = await asyncio.to_thread(
                processor.faiss_loader,
                faiss_dir,
                hybrid_mode=False
            )

            if load_result["success"]:
                faiss_indexes.append(load_result["db"])

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress = (idx + 1) / len(faiss_paths) * 100
            await progress_msg.edit_text(f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: {int(progress)}%")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        user_sessions[user_id] = {
            "faiss_indexes": faiss_indexes,
            "query_prefix": "query: " if processor.db_metadata.get("is_e5_model", False) else ""
        }

        user_sessions[user_id].update({
            "faiss_indexes": faiss_indexes,
            "query_prefix": "query: " if processor.db_metadata.get("is_e5_model", False) else ""
        })

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await progress_msg.delete()
        await callback.message.answer(f"‚úÖ –ë–∞–∑–∞ '{category}' –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–∏—Å–∫—É!")

    except Exception as e:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)
        print(f"‚ùó –û—à–∏–±–∫–∞: {str(e)}")
        traceback.print_exc()
# --------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ---------------------
@dp.message(F.text)
async def handle_query(message: types.Message):
    try:
        user_id = message.from_user.id
        if user_id not in user_sessions:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ /start")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = user_sessions[user_id]

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        raw_results = await processor.multi_async_search(
            query=session["query_prefix"] + message.text,
            indexes=session["faiss_indexes"],
            search_function=processor.aformatted_scored_sim_search_by_cos,
            k=Config.DEFAULT_K
        )

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        sorted_results = sorted(
            raw_results,
            key=lambda x: x["score"],
            reverse=True
        )[:3]  # –¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
        user_sessions[user_id]["last_results"] = sorted_results  # –î–æ–±–∞–≤–ª–µ–Ω–æ

        response = "\n\n".join(
            f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç {i + 1} (–¢–æ—á–Ω–æ—Å—Ç—å: {res['score']:.0%}):\n"
            f"*{res['metadata']['_title']}*\n{res['content'][:200].replace('passage:', '').strip()}..."
            for i, res in enumerate(sorted_results)
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        builder = InlineKeyboardBuilder()
        for idx in range(len(sorted_results)):
            builder.button(
                text=f"–†–µ–∑—É–ª—å—Ç–∞—Ç {idx + 1} ({sorted_results[idx]['score']:.0%})",
                callback_data=f"show_result_{idx}"
            )
        builder.adjust(1)  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ

        await message.answer(
            f"üîç –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n {response}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        print(f"ERROR: {str(e)}")
        traceback.print_exc()

@dp.callback_query(F.data.startswith("show_result_"))
async def handle_result_selection(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        session = user_sessions.get(user_id)

        if not session or "last_results" not in session:
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
            return

        result_idx = int(callback.data.split("_")[-1])
        results = session["last_results"]

        if result_idx >= len(results):
            await callback.answer("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        main_chunk = results[result_idx]

        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç/—Ç–∞–±–ª–∏—Ü—É
        full_content = await assemble_full_content(
            main_chunk=main_chunk,
            faiss_indexes=session["faiss_indexes"]
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = (
            f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {main_chunk['metadata'].get('_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"üîó –¢–∏–ø: {'—Ç–∞–±–ª–∏—Ü–∞' if main_chunk['metadata']['element_type'] == 'table' else '—Ç–µ–∫—Å—Ç'}\n"
            f"üìè –í—Å–µ–≥–æ —á–∞—Å—Ç–µ–π: "
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        await callback.message.answer(header)
        await send_long_message(callback.message, full_content, 3000)
        await callback.answer()

    except Exception as e:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
        print(f"CALLBACK ERROR: {str(e)}")

async def assemble_full_content(main_chunk: dict, faiss_indexes: list) -> str:
    """–°–±–æ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤"""
    chunks = []
    visited = set()
    queue = [main_chunk["metadata"]["chunk_id"]]

    while queue:
        chunk_id = queue.pop(0)
        if chunk_id in visited:
            continue

        # –ü–æ–∏—Å–∫ —á–∞–Ω–∫–∞ –≤–æ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–∞—Ö
        chunk = None
        for index in faiss_indexes:
            chunk = next(
                (doc for doc in index.docstore._dict.values()
                 if doc.metadata["chunk_id"] == chunk_id),
                None
            )
            if chunk:
                break

        if chunk:
            chunks.append(chunk)
            visited.add(chunk_id)
            queue.extend(
                linked_id
                for linked_id in chunk.metadata.get("linked", [])
                if linked_id not in visited
            )

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É chunk_id (–ø—Ä–∏–º–µ—Ä: doc1_p1, doc1_p2)
    chunks.sort(key=lambda x: x.metadata["chunk_id"])

    # –°–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    return "\n\n".join(
        chunk.page_content.replace("passage:", "").strip()
        for chunk in chunks
    )


def format_response(main_chunk: dict, content: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
    header = f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {main_chunk['metadata'].get('_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    element_type = main_chunk["metadata"].get("element_type", "text")

    if element_type == "table":
        return f"{header}üìä –¢–∞–±–ª–∏—Ü–∞:\n{content}"

    if len(content) > 4000:
        content = content[:3900] + "\n[...—Ç–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω...]"

    return f"{header}{content}"


async def send_long_message(
        message: types.Message,
        text: str,
        max_length: int = 4096,
        delimiter: str = "\n\n"
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —á–∞—Å—Ç—è–º–∏ —Å —Ç–æ—á–Ω—ã–º —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞"""
    parts = []

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —á–∞—Å—Ç–∏
    while text:
        # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
        available_size = max_length - (len("üìñ –ß–∞—Å—Ç—å X/X\n\n") if parts else 0)
        chunk = text[:available_size]

        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ä–∞–∑—Ä—ã–≤–∞
        last_break = max(
            chunk.rfind('\n'),
            chunk.rfind(' '),
            chunk.rfind('. ')
        )

        if last_break != -1 and len(chunk) > 100:
            chunk = chunk[:last_break + 1]

        parts.append(chunk)
        text = text[len(chunk):]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
    total = len(parts)
    for i, part in enumerate(parts, 1):
        header = f"üìñ –ß–∞—Å—Ç—å {i}/{total}\n\n" if total > 1 else ""
        await message.answer(header + part)

# --------------------- –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    dp.startup.register(on_startup)  # –Ø–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

    print("=== –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ===")
    print(f"üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if Config.BOT_TOKEN else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!'}")
    print(f"üìÅ –ü—É—Ç—å –∫ –±–∞–∑–∞–º: {Config.FAISS_ROOT}")

    try:
        asyncio.run(dp.start_polling(
            bot,
            skip_updates=True,
            allowed_updates=dp.resolve_used_update_types()
        ))
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")